(defun curry-state-ask ()
  (warn "Please check. Is it going well? ~%")
  (setq ans (read))
  (format t "Your answer is ~A. ~%" ans)
  (if (eql ans 'yes) :success :fail)
  )

(defun string-cb (msg)
  (setq *msg* msg)
  (setq *data* (send msg :data))
  (format t "data is ~A ~%" *data*)
  (setq *msg-flag* t)
  )


(defun init ()
  (ros::roseus "smach-shelf-funcs" :anonymous t)
  (ros::load-ros-manifest "roseus")
  (ros::subscribe "smach_state_msg" std_msgs::string #'string-cb 1)
  (warn "init! ~%")
  )

(defun off ()
  (warn "state: off ~%")
  (setq *msg-flag* nil)
  (until *msg-flag*
         (ros::spin-once)
         (ros::sleep)
         )
  (if (equal *data* "on") ;; case文使って書いても良いかも
      (return-from off :on))
  (if (equal *data* "finish")
      (return-from off :finish)
    (off)
    )
  )

(defun on ()
  (warn "state: on ~%")
  (setq *msg-flag* nil)
  (until *msg-flag*
         (ros::spin-once)
         (ros::sleep)
         )
  (if (equal *data* "off")
      (return-from on :off))
  (if (equal *data* "finish")
      (return-from on :finish))
  (if (equal *data* "melting-fire")
      (return-from on :melting-fire))
  (if (equal *data* "low-heat")
      (return-from on :low-heat))
  (if (equal *data* "medium-heat")
      (return-from on :medium-heat))
  (if (equal *data* "high-heat")
      (return-from on :high-heat))
  (if (equal *data* "high-power")
      (return-from on :high-power)
    (on)
    )
  )

(defun melting-fire ()
  (warn "state: melting-fire ~%")
  (setq *msg-flag* nil)
  (until *msg-flag*
         (ros::spin-once)
         (ros::sleep)
         )
  (if (equal *data* "off")
      (return-from melting-fire :off))
  (if (equal *data* "finish")
      (return-from melting-fire :finish)
    (melting-fire)
    )
  )

(defun low-heat ()
  (warn "state: low-heat ~%")
  (setq *msg-flag* nil)
  (until *msg-flag*
         (ros::spin-once)
         (ros::sleep)
         )
  (if (equal *data* "off")
      (return-from low-heat :off))
  (if (equal *data* "finish")
      (return-from low-heat :finish)
    (low-heat)
    )
  )

(defun medium-heat ()
  (warn "state: medium-heat ~%")
  (setq *msg-flag* nil)
  (until *msg-flag*
         (ros::spin-once)
         (ros::sleep)
         )
  (if (equal *data* "off")
      (return-from medium-heat :off))
  (if (equal *data* "finish")
      (return-from medium-heat :finish)
    (medium-heat)
    )
  )

(defun high-heat ()
  (warn "state: high-heat ~%")
  (setq *msg-flag* nil)
  (until *msg-flag*
         (ros::spin-once)
         (ros::sleep)
         )
  (if (equal *data* "off")
      (return-from high-heat :off))
  (if (equal *data* "finish")
      (return-from high-heat :finish)
    (high-heat)
    )
  )

(defun high-power ()
  (warn "state: high-power ~%")
  (setq *msg-flag* nil)
  (until *msg-flag*
         (ros::spin-once)
         (ros::sleep)
         )
  (if (equal *data* "off")
      (return-from high-power :off))
  (if (equal *data* "finish")
      (return-from high-power :finish)
    (high-power)
    )
  )
