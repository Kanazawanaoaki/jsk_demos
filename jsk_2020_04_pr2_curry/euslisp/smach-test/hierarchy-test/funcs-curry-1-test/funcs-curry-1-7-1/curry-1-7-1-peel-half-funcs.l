(defun curry-state-ask ()
  (warn "Please check. Is it going well? ~%")
  (setq ans (read))
  (format t "Your answer is ~A. ~%" ans)
  (if (eql ans 'yes) :success :fail)
  )

(defun init ()
  (warn "init! ~%")
  )


;; (defun now-peel ()
;;   (recognition)
;;   (grasp-carrot-peel)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (set-peeler)
;;   (set-potato-1)
;;   (set-potato-1-2)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (setq adj (+ adj 10))
;;   (peel-test-c-1)
;;   (setq adj (- adj 10))
;;   (set-potato-1)
;;   (set-potato-2)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(finish-pose-peel)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (peel-test-c-2)
;;   (set-potato-3)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(finish-pose-peel)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (peel-test-c-3)
;;   (set-potato-4)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(finish-pose-peel)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (peel-test-c-4)
;;   (set-potato-5)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(finish-pose-peel)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (peel-test-c-5)
;;   (set-potato-6)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(finish-pose-peel)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (peel-test-c-6)
;;   (set-potato-7)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(finish-pose-peel)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (peel-test-c-7)
;;   (set-potato-8)
;;   (fail-check)
;;   (if (eql *fail-flag* t)
;;       (progn
;; 	(reset-larm)
;; 	(finish-pose-peel)
;; 	(now-set)
;; 	(return-from now-peel)))
;;   (peel-test-c-8)
;;   (finish-pose-peel)
;;   (put-carrot)
;;   (reset-larm)  
;;   )


;; 1(grasp-carrot-peel)
;; (fail-check)

;; 2(set-potato-1-2)
;; (fail-check)
;; 3(peel-test-c-1)
;; 2(set-potato-2)
;; (fail-check)
;; 3(peel-test-c-2)
;; 2(set-potato-3)
;; (fail-check)
;; 3(peel-test-c-3)
;; 2(set-potato-4)
;; (fail-check)
;; 3(peel-test-c-4)
;; 2(set-potato-5)
;; (fail-check)
;; 3(peel-test-c-5)
;; 2(set-potato-6)
;; (fail-check)
;; 3(peel-test-c-6)
;; 2(set-potato-7)
;; (fail-check)
;; 3(peel-test-c-7)
;; 2(set-potato-8)
;; (fail-check)
;; 3(peel-test-c-8)

;; 4(finish-pose-peel)
;; 5(put-carrot)

;; 失敗時
;; (reset-larm)
;; (finish-pose-peel)
;; (now-set)

(defun grasp-detection ()
  ;; グリッパ間距離を見てgraspの成否を判定する
  (grasp-fail-detection-larm :g-thre 10)
  (if (equal *fail-flag* t) :fail :success)
  )

(defun grasp-detection-tmp ()
  (curry-state-ask)
  )

(defun curry-1-7-1-f-1 ()
  (unix:sleep 1)
  (warn "腕を戻す ~%")
  )

(defun curry-1-7-1-f-2 ()
  (unix:sleep 1)
  (warn "人参を位置に戻す ~%")
  )

(defun curry-1-7-1-1 ()
  (unix:sleep 1)
  (warn "人参を掴む ~%")
  )

(defun curry-1-7-1-2 ()
  (unix:sleep 1)
  (warn "人参を位置にセットする ~%")
  )

(defun curry-1-7-1-3 ()
  (unix:sleep 1)
  (warn "人参の皮を剥く ~%")
  )

(defun curry-1-7-1-4 ()
  (unix:sleep 1)
  (warn "腕を戻す ~%")
  )

(defun curry-1-7-1-5 ()
  (unix:sleep 1)
  (warn "人参を置く ~%")
  )

