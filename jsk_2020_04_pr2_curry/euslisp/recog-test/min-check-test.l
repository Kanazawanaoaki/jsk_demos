(defun string2num (string)
  (let (num)
    (cond
     ((equal string "1")
      (setq num 1))
     ((equal string "2")
      (setq num 2))
     ((equal string "3")
      (setq num 3))
     ((equal string "4")
      (setq num 4))
     ((equal string "5")
      (setq num 5))
     ((equal string "6")
      (setq num 6))
     ((equal string "7")
      (setq num 7))
     ((equal string "8")
      (setq num 8))
     ((equal string "9")
      (setq num 9))
     ((equal string "10")
      (setq num 10))
     ((equal string "11")
      (setq num 11))
     )
    num))

(defun min-check (data min) ;; 認識結果dataがminより上か下か一致しているか返す
  (let (data-num)
    (setq data-num (string2num (string-trim "m" (string-trim "/" data))))
    
    (cond
     ((equal data-num min)
      (format t "data is equal ~%")
      (return-from min-check :equal)
      )
     ((< data-num min)
      (format t "data is tarinai ~%")
      (return-from min-check :under)
      )
     ((> data-num min)
      (format t "data is over ~%")
      (return-from min-check :over)
      ))
    )
  )

(warn "please run (min-check data 2) ~%")
